<?php

/**
 * Register the initial theme setup.
 *
 * @return void
 */
add_action(
    'after_setup_theme',
    function () {

        /**
         * Enable plugins to manage the document title.
         *
         * @link https://developer.wordpress.org/reference/functions/add_theme_support/#title-tag
         */
        add_theme_support('title-tag');

        /**
         * Enable post thumbnail support.
         *
         * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/
         */
        add_theme_support('post-thumbnails');

        /**
         * Enable responsive embed support.
         *
         * @link https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#responsive-embedded-content
         */
        add_theme_support('responsive-embeds');

        /**
         * Enable selective refresh for widgets in customizer.
         *
         * @link https://developer.wordpress.org/reference/functions/add_theme_support/#customize-selective-refresh-widgets
         */
        add_theme_support('customize-selective-refresh-widgets');

        /**
         * Disable support for custom styles in the block editor.
         *
         * @link https://developer.wordpress.org/themes/functionality/custom-logo/
         */
        add_theme_support('disable-layout-styles');

        /**
         * Remove core block patterns.
         *
         * @link https://developer.wordpress.org/block-editor/how-to-guides/themes/theme-support/#core-block-patterns
         */
        remove_theme_support('core-block-patterns');

        /**
         * Register navigation menus.
         *
         * This function registers the primary and footer navigation menus
         * for the theme.
         */
        register_nav_menus([
            'primary_menu' => __('Primary Menu', 'classic-theme'),
            'footer_menu' => __('Footer Menu', 'classic-theme'),
        ]);
    },
    20
);

/**
 * Disable color and typography support for block types.
 *
 * This filter removes the color and typography support from all block types,
 * ensuring that the theme does not apply any default styles for these features.
 *
 * @param array $metadata The block type metadata.
 * @return array The modified block type metadata.
 */
add_filter('block_type_metadata', function ($metadata) {

    unset($metadata['supports']['color']);
    unset($metadata['supports']['typography']);

    return $metadata;
}, 10, 1);


/**
 * Template redirection for custom folder setup
 */
add_filter('template_include', function () {
    if (is_front_page()) {
        $path = get_theme_file_path('templates/front-page.php');
        if (file_exists($path)) return $path;
    }

    if (is_home()) {
        $path = get_theme_file_path('templates/home.php');
        if (file_exists($path)) return $path;
    }

    if (is_singular()) {
        $path = get_theme_file_path('templates/single.php');
        if (file_exists($path)) return $path;
    }

    if (is_page()) {
        $path = get_theme_file_path('templates/page.php');
        if (file_exists($path)) return $path;
    }

    if (is_archive()) {
        $path = get_theme_file_path('templates/archive.php');
        if (file_exists($path)) return $path;
    }

    // Fallback
    $default = get_theme_file_path('templates/index.php');
    if (file_exists($default)) return $default;

    return get_index_template(); // default WP fallback
});

/**
 * Enqueue theme assets.
 *
 * This function will enqueue the main stylesheet and script for the theme.
 * It uses the manifest file generated by Vite to ensure the correct files are loaded.
 */
function theme_enqueue_assets()
{
    $manifest = json_decode(
        file_get_contents(get_template_directory() . '/dist/.vite/manifest.json'),
        true
    );
    $js = $manifest['js/main.js'];

    wp_enqueue_style(
        'theme-style',
        get_template_directory_uri() . '/dist/' . $js['css'][0],
        [],
        null
    );

    wp_enqueue_script(
        'theme-script',
        get_template_directory_uri() . '/dist/' . $js['file'],
        [],
        null,
        true
    );
}
add_action('wp_enqueue_scripts', 'theme_enqueue_assets');

/**
 * Enqueue Vite assets for development.
 *
 * This function will enqueue the Vite development server script
 * when the WP_ENV constant is set to 'development'.
 */
function enqueue_vite_assets()
{
    // Only run in development
    // if (defined('WP_ENV') && WP_ENV === 'development') {
    echo '<script type="module" src="http://localhost:5173/js/main.js"></script>';
    // }
}
add_action('wp_head', 'enqueue_vite_assets');


/**
 * We use WordPress's init hook to make sure
 * blocks are registered early in the loading
 * process.
 *
 * @link https://developer.wordpress.org/reference/hooks/init/
 */
function register_acf_blocks()
{
    /**
     * We register our block's with WordPress's handy
     * register_block_type();
     *
     * @link https://developer.wordpress.org/reference/functions/register_block_type/
     */

    // register_block_type(__DIR__ . '/blocks/hero');
}
add_action('init', 'register_acf_blocks');

/**
 * Enable specific core blocks in CMS
 */
function classic_theme_allowed_block_types($allowed_block_types, $editor_context)
{
    $allowed_block_types = [
        'core/block',
        'core/group',
        'core/heading',
        'core/html',
        'core/paragraph',
        'core/quote',
        'core/image',
        'core/list',
        'core/list-item',
        // 'acf/hero'
    ];

    return $allowed_block_types;
}
add_filter('allowed_block_types_all', 'classic_theme_allowed_block_types', 10, 2);


/**
 * Register a custom block category for our theme.
 */
function classic_theme_register_block_category($categories, $post)
{
    return array_merge(
        $categories,
        [
            [
                'slug'  => 'theme',
                'title' => __('Theme', 'classic-theme'),
                'icon'  => null, // optional
            ],
        ]
    );
}
add_filter('block_categories_all', 'classic_theme_register_block_category', 10, 2);
